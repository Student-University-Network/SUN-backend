// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator dbml {
  provider = "prisma-dbml-generator"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma" // prisma relation mode required by planetscale
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Role {
  ADMIN
  STAFF
  FACULTY
  STUDENT
}

model User {
  id              String             @id @default(uuid())
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  role            Role               @default(STUDENT)
  userLoginData   UserLoginData      @relation(fields: [userLoginDataId], references: [id])
  userLoginDataId String             @unique
  profile         Profile?
  academicDetails AcademicDetails?
  teachesCourses  TeachersOnCourse[]
}

model Profile {
  id          String    @id @default(uuid())
  gender      Gender?
  firstName   String?
  lastName    String?
  middleName  String?
  dateOfBirth DateTime? @db.Date()
  user        User?     @relation(fields: [userId], references: [id])
  userId      String    @unique

  @@index(userId)
}

model UserLoginData {
  id       String @id @default(uuid())
  username String @unique
  password String
  email    String @unique
  User     User?
}

model AcademicDetails {
  userId    String  @id @default(uuid())
  User      User    @relation(fields: [userId], references: [id])
  rollNo    Int?    @unique
  batchId   String?
  batch     Batch?  @relation(fields: [batchId], references: [id])
  programId String
  program   Program @relation(fields: [programId], references: [programId])

  @@index([userId])
  @@index([batchId])
  @@index([programId])
}

model Batch {
  id        String             @id @default(uuid())
  batchName String             @db.VarChar(255)
  students  AcademicDetails[]
  courses   TeachersOnCourse[]
  program   Program?           @relation(fields: [programId], references: [programId])
  programId String?
  // timetable Timetable?

  @@index([programId])
}

model Program {
  programId       String            @id @default(uuid())
  programName     String            @unique
  duration        Int               @default(0)
  startYear       DateTime
  endYear         DateTime
  tag             String            @default("")
  semesters       Semester[]
  currentSemester Int               @default(0)
  students        AcademicDetails[]
  batches         Batch[]
  // announcement    Announcement[]
}

model Semester {
  semesterId   String   @id @default(uuid())
  semesterName String   @db.VarChar(255)
  order        Int
  programId    String   @db.VarChar(255)
  program      Program  @relation(fields: [programId], references: [programId])
  courses      Course[]

  @@index([programId])
}

model Course {
  courseId      String             @id @default(uuid()) @map("id")
  courseName    String             @db.VarChar(255)
  totalLectures Int                @default(0)
  compulsory    Boolean            @default(true)
  semesterId    String             @db.VarChar(255)
  semester      Semester           @relation(fields: [semesterId], references: [semesterId])
  teachedBy     TeachersOnCourse[]
  // attendance    Attendance[]
  // announcement  Announcement[]

  @@index([semesterId])
}

model TeachersOnCourse {
  courseId    String
  course      Course @relation(fields: [courseId], references: [courseId])
  professorId String @db.VarChar(255)
  professor   User   @relation(fields: [professorId], references: [id])
  batchId     String
  forBatch    Batch  @relation(fields: [batchId], references: [id])

  @@id([courseId, batchId])
  @@index([courseId])
  @@index([professorId])
  @@index([batchId])
}

// model Attendance {
//   userId   String @id @db.VarChar(255)
//   courseId String @db.VarChar(255)
//   attended Int    @default(0)
//   student  User   @relation(fields: [userId], references: [id])
//   course   Course @relation(fields: [courseId], references: [id])
// }

// model Timetable {
//   id            String @id @db.VarChar(255)
//   timetableFile String
//   batch         Batch  @relation(fields: [id], references: [id])
// }

// model Announcement {
//   id        String   @id @db.VarChar(255)
//   title     String
//   content   String
//   userId    String?
//   announcer User?    @relation(fields: [userId], references: [id])
//   programId String?
//   program   Program? @relation(fields: [programId], references: [id])
//   courseId  String?
//   course    Course?  @relation(fields: [courseId], references: [id])
// }
